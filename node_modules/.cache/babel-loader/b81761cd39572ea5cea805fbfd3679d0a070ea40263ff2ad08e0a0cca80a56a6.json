{"ast":null,"code":"//petición al backend de todos los ejercicios\nexport const getAllExercisesService = async () => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/exercises`);\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\n\n//petición al backend de un ejercicio\nexport const singleExerciseService = async id => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/exercises/${id}`);\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\n\n//función para registrarse\nexport const registerUserService = async _ref => {\n  let {\n    name,\n    email,\n    password\n  } = _ref;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      name,\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\n\n// función para loguearse\nexport const loginUserService = async _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/login`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\n\n// función para obtener información del usuario logueado\nexport const getUserData = async _ref3 => {\n  let {\n    token\n  } = _ref3;\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"GET\",\n    headers: {\n      Authorization: token\n    }\n  });\n};","map":{"version":3,"names":["getAllExercisesService","response","fetch","process","env","REACT_APP_BACKEND","json","ok","Error","message","data","singleExerciseService","id","registerUserService","_ref","name","email","password","method","body","JSON","stringify","headers","loginUserService","_ref2","getUserData","_ref3","token","Authorization"],"sources":["/home/hack/Documents/ProyectoFinal/proyecto_react_mio/src/services/index.js"],"sourcesContent":["//petición al backend de todos los ejercicios\nexport const getAllExercisesService = async () => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/exercises`);\n\n  const json = await response.json();\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n\n  return json.data;\n};\n\n//petición al backend de un ejercicio\nexport const singleExerciseService = async (id) => {\n  const response = await fetch(\n    `${process.env.REACT_APP_BACKEND}/exercises/${id}`\n  );\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\n\n//función para registrarse\nexport const registerUserService = async ({ name, email, password }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"POST\",\n    body: JSON.stringify({ name, email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n};\n\n// función para loguearse\nexport const loginUserService = async ({ email, password }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/login`, {\n    method: \"POST\",\n    body: JSON.stringify({ email, password }),\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  const json = await response.json();\n\n  if (!response.ok) {\n    throw new Error(json.message);\n  }\n  return json.data;\n};\n\n// función para obtener información del usuario logueado\nexport const getUserData = async ({ token }) => {\n  const response = await fetch(`${process.env.REACT_APP_BACKEND}/user`, {\n    method: \"GET\",\n    headers: {\n      Authorization: token,\n    },\n  });\n};\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,sBAAsB,GAAG,MAAAA,CAAA,KAAY;EAChD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,YAAW,CAAC;EAE1E,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,EAAE;EAClC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EAEA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;;AAED;AACA,OAAO,MAAMC,qBAAqB,GAAG,MAAOC,EAAE,IAAK;EACjD,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,cAAaO,EAAG,EAAC,CACnD;EAED,MAAMN,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,EAAE;EAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;;AAED;AACA,OAAO,MAAMG,mBAAmB,GAAG,MAAAC,IAAA,IAAqC;EAAA,IAA9B;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAS,CAAC,GAAAH,IAAA;EACjE,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,OAAM,EAAE;IACpEa,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEN,IAAI;MAAEC,KAAK;MAAEC;IAAS,CAAC,CAAC;IAC/CK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EAEF,MAAMhB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,EAAE;EAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;AACF,CAAC;;AAED;AACA,OAAO,MAAMc,gBAAgB,GAAG,MAAAC,KAAA,IAA+B;EAAA,IAAxB;IAAER,KAAK;IAAEC;EAAS,CAAC,GAAAO,KAAA;EACxD,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,QAAO,EAAE;IACrEa,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEL,KAAK;MAAEC;IAAS,CAAC,CAAC;IACzCK,OAAO,EAAE;MACP,cAAc,EAAE;IAClB;EACF,CAAC,CAAC;EACF,MAAMhB,IAAI,GAAG,MAAML,QAAQ,CAACK,IAAI,EAAE;EAElC,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,OAAO,CAAC;EAC/B;EACA,OAAOH,IAAI,CAACI,IAAI;AAClB,CAAC;;AAED;AACA,OAAO,MAAMe,WAAW,GAAG,MAAAC,KAAA,IAAqB;EAAA,IAAd;IAAEC;EAAM,CAAC,GAAAD,KAAA;EACzC,MAAMzB,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEC,OAAO,CAACC,GAAG,CAACC,iBAAkB,OAAM,EAAE;IACpEa,MAAM,EAAE,KAAK;IACbI,OAAO,EAAE;MACPM,aAAa,EAAED;IACjB;EACF,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}